# Imports mock data
import "tfplan/v2" as tfplan
import "json"
import "strings"
import "tfgraph/v2" as tfgraph

getKeyAfterRemovingIndexes = func(st) {
    ls = strings.split(st, ".")
    res = []
    for ls as k, v {
        append(res, strings.split(v, "[")[0])
    }
    return strings.join(res, ".")
}

print("graph start ************************************")
for tfgraph.graph["Nodes"] as _, n {
    print(n)
    print("")
}
print("graph end ************************************")

walkgraph = func(resAd, attribute) {
    resAddr = getKeyAfterRemovingIndexes(resAd)
    gr = tfgraph.graph
    for gr["Nodes"] as node {
        if (node["Name"] == resAddr) {
            for node["Edges"] as k, v {
                if k == attribute {
                    return v
                }
            }
        }
    }
    return "" 
}

checkAllCloudtrailS3BucketPublicAccess = func() {
    all_cloudtrail = filter tfplan.resource_changes as _, instances {
        instances.type is "aws_cloudtrail"
    }
    all_public_access_block = filter tfplan.resource_changes as _, instances {
        instances.type is "aws_s3_bucket_public_access_block"
    }
    found = true
    for all_cloudtrail as _, ct {
        foundPolicy = false
        s3_bucket = walkgraph(ct.address, "s3_bucket_name")[0]
        print(s3_bucket)
        for all_public_access_block as _, pac {
            bucketInPolicy = walkgraph(pac.address, "bucket")[0]
            print(bucketInPolicy)
            if s3_bucket == bucketInPolicy {
                // add more edges here
                if walkgraph(pac.address, "block_public_acls") == "true" {
                    foundPolicy = true
                } 
            }
        }
        found = found or foundPolicy
    }
    print(found)
    return found
}

main = rule {
    checkAllCloudtrailS3BucketPublicAccess()
}